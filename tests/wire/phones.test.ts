/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SonykClient } from "../../src/Client";

describe("Phones", () => {
    test("listPhonesDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            meta: { pagination: { currentPage: 1, totalPages: 1, totalItems: 1, itemsPerPage: 1 } },
            data: [
                {
                    pk_phone_id: "phone_abc123def456",
                    phone_number: "+1234567890",
                    provider: "twilio",
                    nickname: "Main Reception Line",
                    is_active: true,
                    fk_agent_id: "fk_agent_id",
                    fk_org_id: 1,
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/api/developer/phones")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.listPhonesDeveloper({
            provider: "twilio",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            meta: {
                pagination: {
                    currentPage: 1,
                    totalPages: 1,
                    totalItems: 1,
                    itemsPerPage: 1,
                },
            },
            data: [
                {
                    pk_phone_id: "phone_abc123def456",
                    phone_number: "+1234567890",
                    provider: "twilio",
                    nickname: "Main Reception Line",
                    is_active: true,
                    fk_agent_id: "fk_agent_id",
                    fk_org_id: 1,
                    created_at: "2024-01-15T09:30:00Z",
                },
            ],
        });
    });

    test("createPhoneDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumber: "+1234567890", provider: "twilio" };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: { agent_id: "agent_id", agent_name: "agent_name" },
            },
        };
        server
            .mockEndpoint()
            .post("/api/developer/phones")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.createPhoneDeveloper({
            phoneNumber: "+1234567890",
            provider: "twilio",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                },
            },
        });
    });

    test("getPhoneDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: { agent_id: "agent_id", agent_name: "agent_name" },
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/phones/phoneId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.getPhoneDeveloper("phoneId");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                },
            },
        });
    });

    test("updatePhoneDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: { agent_id: "agent_id", agent_name: "agent_name" },
            },
        };
        server
            .mockEndpoint()
            .put("/api/developer/phones/phoneId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.updatePhoneDeveloper("phoneId");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                },
            },
        });
    });

    test("deletePhoneDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message", timestamp: "2024-01-15T09:30:00Z" };
        server
            .mockEndpoint()
            .delete("/api/developer/phones/phoneId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.deletePhoneDeveloper("phoneId");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
        });
    });

    test("mapPhoneToAgentDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId" };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: { agent_id: "agent_id", agent_name: "agent_name" },
            },
        };
        server
            .mockEndpoint()
            .post("/api/developer/phones/phoneId/map-agent")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.mapPhoneToAgentDeveloper("phoneId", {
            agentId: "agentId",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                },
            },
        });
    });

    test("unmapPhoneFromAgentDeveloper", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: { agent_id: "agent_id", agent_name: "agent_name" },
            },
        };
        server
            .mockEndpoint()
            .post("/api/developer/phones/phoneId/unmap-agent")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phones.unmapPhoneFromAgentDeveloper("phoneId");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_phone_id: "phone_abc123def456",
                phone_number: "+1234567890",
                provider: "twilio",
                nickname: "Main Reception Line",
                is_active: true,
                fk_agent_id: "fk_agent_id",
                fk_org_id: 1,
                created_at: "2024-01-15T09:30:00Z",
                agent: {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                },
            },
        });
    });
});
